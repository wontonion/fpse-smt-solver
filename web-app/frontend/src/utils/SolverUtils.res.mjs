// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

async function postFormula(type_, content) {
  try {
    var response = await fetch("/api/solver/solve", {
          method: "POST",
          headers: Object.fromEntries([[
                  "Content-Type",
                  "application/json"
                ]]),
          body: JSON.stringify(Js_dict.fromArray([
                    [
                      "type",
                      type_
                    ],
                    [
                      "content",
                      content
                    ]
                  ]))
        });
    if (!response.ok) {
      return {
              TAG: "Error",
              _0: "Network response was not ok"
            };
    }
    var json = await response.json();
    var result = Belt_Option.getExn(Js_json.decodeObject(json));
    var status = Js_dict.get(result, "status");
    var exit = 0;
    if (status !== undefined) {
      if (status === "error") {
        return {
                TAG: "Error",
                _0: Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(result, "message"))))
              };
      }
      exit = 1;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var data = Belt_Option.getExn(Js_json.decodeObject(Belt_Option.getExn(Js_dict.get(result, "data"))));
      var solution = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(data, "data"))));
      return {
              TAG: "Ok",
              _0: solution
            };
    }
    
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    return {
            TAG: "Error",
            _0: "Failed to solve formula: " + String(err)
          };
  }
}

export {
  postFormula ,
}
/* No side effect */
