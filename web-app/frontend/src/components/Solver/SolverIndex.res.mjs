// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../Button/Button.res.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as SolverUtils from "../../utils/SolverUtils.res.mjs";
import * as ToastService from "../../services/ToastService.res.mjs";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var $$Blob = {};

function getSolverExample(tabName) {
  var match;
  switch (tabName) {
    case "sat" :
        match = [
          "Enter CNF formula in DIMACS format",
          "p cnf 3 2\n1 2 -3 0\n-2 3 0"
        ];
        break;
    case "smt" :
        match = [
          "Enter SMT formula",
          "VAR 1 MUL 3 CONST 4 ADD VAR 1 CONST 14 XOR EQ END\n\nThe SMT module supports a limited set of operations: \nXOR, AND, OR, NOT, EQ, NEQ0, GEQ0, LT0, ADD, SHL, and MUL. \n\nIt operates on int16_t, but the length can be easily \nadjusted to higher types (e.g., int32_t, int64_t)."
        ];
        break;
    default:
      match = [
        "",
        ""
      ];
  }
  return match[0] + "\n\nExample:\n" + match[1];
}

function handleDownloadTemplate(tabName) {
  try {
    var content = getSolverExample(tabName) + "\n\nDelete all template text before entering your formula";
    var element = document.createElement("a");
    var file = new Blob([content], {
          type: "text/plain"
        });
    var url = URL.createObjectURL(file);
    element.setAttribute("href", url);
    element.setAttribute("download", tabName.toLowerCase() + "_template.txt");
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    URL.revokeObjectURL(url);
    return ToastService.success("Template downloaded successfully, please check your download folder");
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    console.error("Error downloading template:", err);
    return ToastService.error("Error downloading template");
  }
}

function make() {
  return {
          content: "",
          solution: "Solution will appear here"
        };
}

var TabState = {
  make: make
};

function SolverIndex(props) {
  var tabName = props.tabName;
  var textareaRef = React.useRef(null);
  var match = React.useState(function () {
        return false;
      });
  var setIsLoading = match[1];
  var isLoading = match[0];
  var match$1 = React.useState(function () {
        return Belt_MapString.fromArray([
                    [
                      "sat",
                      {
                        content: "",
                        solution: "Solution will appear here"
                      }
                    ],
                    [
                      "smt",
                      {
                        content: "",
                        solution: "Solution will appear here"
                      }
                    ]
                  ]);
      });
  var setTabStates = match$1[1];
  var currentState = Belt_Option.getWithDefault(Belt_MapString.get(match$1[0], tabName.toLowerCase()), {
        content: "",
        solution: "Solution will appear here"
      });
  React.useEffect((function () {
          Belt_Option.forEach(Caml_option.nullable_to_opt(textareaRef.current), (function (textarea) {
                  textarea.value = currentState.content;
                }));
        }), [tabName]);
  var updateTabState = function (newState) {
    setTabStates(function (prev) {
          return Belt_MapString.set(prev, tabName.toLowerCase(), newState);
        });
  };
  var handleFileUpload = function (e) {
    var fileInput = e.target;
    var files = fileInput.files;
    if (files.length <= 0) {
      return ;
    }
    var file = files.item(0);
    var reader = new FileReader();
    reader.onerror = (function (_err) {
        console.error("Error reading file");
      });
    reader.onload = (function ($$event) {
        var content = $$event.target.result;
        updateTabState({
              content: content,
              solution: currentState.solution
            });
        var textarea = textareaRef.current;
        if (!(textarea == null)) {
          textarea.value = content;
          return ;
        }
        
      });
    reader.readAsText(file);
    ToastService.success("File uploaded successfully");
  };
  var handleSolveProblems = function (param) {
    var textarea = textareaRef.current;
    if (textarea == null) {
      return ;
    }
    var content = textarea.value;
    if (content.length === 0) {
      return ToastService.error("Nothing to solve");
    } else {
      setIsLoading(function (param) {
            return true;
          });
      updateTabState({
            content: currentState.content,
            solution: "Solving..."
          });
      Core__Promise.$$catch(SolverUtils.postFormula(tabName.toLowerCase(), content).then(function (result) {
                if (result.TAG === "Ok") {
                  updateTabState({
                        content: currentState.content,
                        solution: result._0
                      });
                  ToastService.success("Solved successfully");
                } else {
                  updateTabState({
                        content: currentState.content,
                        solution: "Error: " + result._0
                      });
                  ToastService.error("Failed to solve");
                }
                setIsLoading(function (param) {
                      return false;
                    });
                return Promise.resolve();
              }), (function (err) {
              var errorMessage;
              if (err.RE_EXN_ID === Js_exn.$$Error) {
                var msg = err._1.message;
                errorMessage = msg !== undefined ? msg : "An unknown error occurred";
              } else {
                errorMessage = "An unknown error occurred";
              }
              updateTabState({
                    content: currentState.content,
                    solution: "Error: " + errorMessage
                  });
              setIsLoading(function (param) {
                    return false;
                  });
              ToastService.error("An error occurred while solving");
              return Promise.resolve();
            }));
      return ;
    }
  };
  var handleClearTextarea = function () {
    if (currentState.content.length === 0) {
      return ToastService.error("Nothing to clear");
    } else {
      updateTabState({
            content: "",
            solution: "Solution will appear here"
          });
      Belt_Option.forEach(Caml_option.nullable_to_opt(textareaRef.current), (function (textarea) {
              textarea.value = "";
            }));
      return ToastService.success("Cleared successfully");
    }
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h2", {
                              children: tabName.toUpperCase() + " Formula Input",
                              className: "text-xl font-semibold mb-4"
                            }),
                        JsxRuntime.jsx("textarea", {
                              ref: Caml_option.some(textareaRef),
                              className: "w-full h-64 p-2 border rounded font-mono whitespace-pre",
                              placeholder: getSolverExample(tabName),
                              value: currentState.content,
                              onChange: (function (e) {
                                  var newContent = e.target.value;
                                  updateTabState({
                                        content: newContent,
                                        solution: currentState.solution
                                      });
                                })
                            }),
                        JsxRuntime.jsx("input", {
                              className: "hidden",
                              id: "fileInput",
                              accept: ".txt",
                              type: "file",
                              onChange: handleFileUpload
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(Button.make, {
                                      children: "Download Template",
                                      onClick: (function (param) {
                                          handleDownloadTemplate(tabName);
                                        })
                                    }),
                                JsxRuntime.jsx(Button.make, {
                                      children: "Upload problem batch",
                                      onClick: (function (param) {
                                          Belt_Option.forEach(Caml_option.nullable_to_opt(document.getElementById("fileInput")), (function (prim) {
                                                  prim.click();
                                                }));
                                        })
                                    }),
                                JsxRuntime.jsx(Button.make, {
                                      children: "Clear",
                                      onClick: (function (param) {
                                          handleClearTextarea();
                                        })
                                    }),
                                JsxRuntime.jsx(Button.make, {
                                      children: Caml_option.some(isLoading ? "Solving..." : "Solve"),
                                      disabled: isLoading,
                                      onClick: handleSolveProblems
                                    })
                              ],
                              className: "mt-4 flex gap-4 justify-between"
                            })
                      ],
                      className: "flex flex-col"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h2", {
                              children: "Solution",
                              className: "text-xl font-semibold mb-4"
                            }),
                        JsxRuntime.jsx("pre", {
                              children: currentState.solution,
                              className: "border p-4 h-64 overflow-auto font-mono whitespace-pre-wrap"
                            })
                      ]
                    })
              ],
              className: "grid grid-cols-2 gap-6"
            });
}

var make$1 = SolverIndex;

export {
  $$Blob ,
  getSolverExample ,
  handleDownloadTemplate ,
  TabState ,
  make$1 as make,
}
/* react Not a pure module */
