// Generated by ReScript, PLEASE EDIT WITH CARE

import * as JsxRuntime from "react/jsx-runtime";

function Cell(props) {
  var onCellChange = props.onCellChange;
  var __className = props.className;
  var isBottomBorder = props.isBottomBorder;
  var isRightBorder = props.isRightBorder;
  var colIndex = props.colIndex;
  var rowIndex = props.rowIndex;
  var size = props.size;
  var cell = props.cell;
  var className = __className !== undefined ? __className : "";
  var getCellClassName = function () {
    var baseStyle = "w-[50px] h-[50px] border border-gray-300 flex items-center justify-center relative";
    var borderStyle = isRightBorder ? (
        isBottomBorder ? " border-r-2 border-b-2 border-r-gray-800 border-b-gray-800" : " border-r-2 border-r-gray-800"
      ) : (
        isBottomBorder ? " border-b-2 border-b-gray-800" : ""
      );
    if (cell.isInitial) {
      return baseStyle + borderStyle + " !bg-gray-500";
    } else {
      return baseStyle + borderStyle;
    }
  };
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("input", {
                    className: "w-full h-full text-center focus:outline-none bg-transparent text-base\n        " + (
                      props.hasRowError || props.hasColError || props.hasBlockConflict ? "text-red-600 font-bold" : (
                          props.isRowComplete || props.isColComplete || props.isBlockComplete ? "text-green-600 font-bold" : (
                              cell.isInitial ? "text-white font-bold" : ""
                            )
                        )
                    ),
                    disabled: cell.isInitial,
                    maxLength: 1,
                    type: "text",
                    value: cell.value,
                    onChange: (function ($$event) {
                        var newValue = $$event.target.value;
                        var validNumberPattern = size !== 4 ? (
                            size !== 9 ? /^$/ : /^[1-9]$/
                          ) : /^[1-4]$/;
                        if (newValue === "" || validNumberPattern.test(newValue)) {
                          return onCellChange([
                                      rowIndex,
                                      colIndex,
                                      newValue
                                    ]);
                        }
                        
                      })
                  }),
              className: getCellClassName() + " " + className
            });
}

var make = Cell;

export {
  make ,
}
/* react/jsx-runtime Not a pure module */
