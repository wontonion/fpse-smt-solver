// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cell from "./Cell.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function Grid(props) {
  var onCellChange = props.onCellChange;
  var values = props.values;
  var size = props.size;
  var subGridSize;
  switch (size) {
    case 4 :
    case 6 :
        subGridSize = 2;
        break;
    default:
      subGridSize = 3;
  }
  var validateCell = function (row, col, value, grid) {
    var rowValid = Core__Option.getOr(Core__Option.map(Belt_Array.get(grid, row), (function (rowArr) {
                return Belt_Array.every(rowArr, (function (cell) {
                              if (cell.value !== value) {
                                return true;
                              } else {
                                return cell.value === "";
                              }
                            }));
              })), true);
    var colValid = Belt_Array.every(grid, (function (row) {
            var value = Core__Option.getOr(Core__Option.map(Belt_Array.get(row, col), (function (cell) {
                        return cell.value;
                      })), "");
            if (value !== value) {
              return true;
            } else {
              return value === "";
            }
          }));
    if (rowValid) {
      return colValid;
    } else {
      return false;
    }
  };
  return JsxRuntime.jsx("div", {
              children: Belt_Array.mapWithIndex(values, (function (rowIndex, row) {
                      return JsxRuntime.jsx("div", {
                                  children: Belt_Array.mapWithIndex(row, (function (colIndex, cell) {
                                          var isRightBorder = Caml_int32.mod_(colIndex + 1 | 0, subGridSize) === 0 && colIndex !== (size - 1 | 0);
                                          var isBottomBorder = Caml_int32.mod_(rowIndex + 1 | 0, subGridSize) === 0 && rowIndex !== (size - 1 | 0);
                                          return JsxRuntime.jsx(Cell.make, {
                                                      cell: cell,
                                                      rowIndex: rowIndex,
                                                      colIndex: colIndex,
                                                      isRightBorder: isRightBorder,
                                                      isBottomBorder: isBottomBorder,
                                                      onCellChange: (function (param) {
                                                          var value = param[2];
                                                          var col = param[1];
                                                          var row = param[0];
                                                          validateCell(row, col, value, values);
                                                          onCellChange([
                                                                row,
                                                                col,
                                                                value
                                                              ]);
                                                        })
                                                    }, rowIndex.toString() + "-" + colIndex.toString());
                                        })),
                                  className: "flex"
                                }, rowIndex.toString());
                    })),
              className: "grid gap-0"
            });
}

var make = Grid;

export {
  make ,
}
/* Cell Not a pure module */
