// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Grid from "./Grid.res.mjs";
import * as React from "react";
import * as Button from "../Button/Button.res.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function SudokuIndex(props) {
  var match = React.useState(function () {
        return 9;
      });
  var setGridSize = match[1];
  var gridSize = match[0];
  var createEmptyGrid = function (size) {
    return Belt_Array.makeBy(size, (function (param) {
                  return Belt_Array.make(size, {
                              value: "",
                              isInitial: false,
                              isValid: true,
                              notes: []
                            });
                }));
  };
  var match$1 = React.useState(function () {
        return createEmptyGrid(gridSize);
      });
  var setGridValues = match$1[1];
  React.useEffect((function () {
          setGridValues(function (param) {
                return createEmptyGrid(gridSize);
              });
        }), [gridSize]);
  var handleCellChange = function (param) {
    var value = param[2];
    var col = param[1];
    var row = param[0];
    setGridValues(function (prev) {
          return Belt_Array.mapWithIndex(prev, (function (i, rowArr) {
                        if (i === row) {
                          return Belt_Array.mapWithIndex(rowArr, (function (j, cell) {
                                        if (j === col) {
                                          return {
                                                  value: value,
                                                  isInitial: cell.isInitial,
                                                  isValid: true,
                                                  notes: cell.notes
                                                };
                                        } else {
                                          return cell;
                                        }
                                      }));
                        } else {
                          return rowArr;
                        }
                      }));
        });
  };
  var handleClearGrid = function () {
    setGridValues(function (param) {
          return createEmptyGrid(gridSize);
        });
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: "Sudoku Grid"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsxs("select", {
                                            children: [
                                              JsxRuntime.jsx("option", {
                                                    children: "4x4",
                                                    value: "4"
                                                  }),
                                              JsxRuntime.jsx("option", {
                                                    children: "6x6",
                                                    value: "6"
                                                  }),
                                              JsxRuntime.jsx("option", {
                                                    children: "9x9",
                                                    value: "9"
                                                  })
                                            ],
                                            className: "border border-gray-300 rounded px-2 py-1",
                                            value: gridSize.toString(),
                                            onChange: (function ($$event) {
                                                var newSize = Core__Option.getOr(Core__Int.fromString($$event.target.value, undefined), 9);
                                                setGridSize(function (param) {
                                                      return newSize;
                                                    });
                                              })
                                          }),
                                      className: "flex items-center gap-2 ml-2"
                                    })
                              ],
                              className: "text-xl font-semibold mb-4 justify-start flex items-center"
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(Grid.make, {
                                    size: gridSize,
                                    values: match$1[0],
                                    onCellChange: handleCellChange
                                  }),
                              className: "border-2 border-gray-300 p-4 justify-center flex"
                            })
                      ]
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h2", {
                              children: "Controls",
                              className: "text-xl font-semibold mb-4"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(Button.make, {
                                      children: "Solve Puzzle",
                                      onClick: (function (param) {
                                          
                                        })
                                    }),
                                JsxRuntime.jsx(Button.make, {
                                      children: "Clear Grid",
                                      onClick: (function (param) {
                                          handleClearGrid();
                                        })
                                    }),
                                JsxRuntime.jsx(Button.make, {
                                      children: "Generate New Puzzle",
                                      onClick: (function (param) {
                                          
                                        })
                                    })
                              ],
                              className: "space-y-4"
                            })
                      ]
                    })
              ],
              className: "grid grid-cols-2 gap-6"
            });
}

var make = SudokuIndex;

export {
  make ,
}
/* Grid Not a pure module */
