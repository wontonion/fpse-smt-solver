// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Grid from "./Grid.res.mjs";
import * as React from "react";
import * as Button from "../Button/Button.res.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as SudokuUtils from "../../utils/SudokuUtils.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as ToastService from "../../services/ToastService.res.mjs";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.mjs";
import * as ReactToastify from "../../bindings/ReactToastify.res.mjs";
import * as ReactToastify$1 from "react-toastify";
import * as JsxRuntime from "react/jsx-runtime";

import "react-toastify/dist/ReactToastify.css"
;

function SudokuIndex(props) {
  var match = React.useState(function () {
        return 3;
      });
  var setBlockSize = match[1];
  var blockSize = match[0];
  var match$1 = React.useState(function () {
        return Math.imul(blockSize, blockSize);
      });
  var setGridSize = match$1[1];
  var gridSize = match$1[0];
  var match$2 = React.useState(function () {
        return SudokuUtils.createEmptyGrid(gridSize);
      });
  var setGridValues = match$2[1];
  var gridValues = match$2[0];
  var hasNoNumber = Belt_Array.reduce(gridValues, true, (function (acc, row) {
          if (acc) {
            return Belt_Array.reduce(row, true, (function (acc, cell) {
                          if (acc) {
                            return cell.value === "";
                          } else {
                            return false;
                          }
                        }));
          } else {
            return false;
          }
        }));
  var hasAnyValidationError = function (grid) {
    var size = grid.length;
    var blockSize = size !== 4 ? 3 : 2;
    var hasRowError = Belt_Array.reduceWithIndex(grid, false, (function (acc, param, rowIndex) {
            if (acc) {
              return true;
            } else {
              return Grid.hasRowConflict(rowIndex, grid);
            }
          }));
    var hasColError = Belt_Array.reduce(Belt_Array.makeBy(size, (function (i) {
                return i;
              })), false, (function (acc, colIndex) {
            if (acc) {
              return true;
            } else {
              return Grid.hasColConflict(colIndex, grid);
            }
          }));
    var numBlocks = Math.imul(blockSize, blockSize);
    var hasBlockError = Belt_Array.reduce(Belt_Array.makeBy(numBlocks, (function (i) {
                return i;
              })), false, (function (acc, blockIndex) {
            if (acc) {
              return true;
            } else {
              return Grid.hasBlockConflict(blockIndex, grid);
            }
          }));
    if (hasRowError || hasColError) {
      return true;
    } else {
      return hasBlockError;
    }
  };
  React.useEffect((function () {
          setGridValues(function (param) {
                return SudokuUtils.createEmptyGrid(gridSize);
              });
        }), [gridSize]);
  var handleCellChange = function (param) {
    var value = param[2];
    var col = param[1];
    var row = param[0];
    setGridValues(function (prev) {
          return Belt_Array.mapWithIndex(prev, (function (i, rowArr) {
                        if (i === row) {
                          return Belt_Array.mapWithIndex(rowArr, (function (j, cell) {
                                        if (j === col) {
                                          return {
                                                  value: value,
                                                  isInitial: cell.isInitial,
                                                  isValid: true
                                                };
                                        } else {
                                          return cell;
                                        }
                                      }));
                        } else {
                          return rowArr;
                        }
                      }));
        });
  };
  var handleClearGrid = function () {
    setGridValues(function (param) {
          return SudokuUtils.createEmptyGrid(gridSize);
        });
    ToastService.success("Grid cleared successfully");
  };
  var handleGenerateGrid = function () {
    Core__Promise.$$catch(SudokuUtils.sudokuGenerate(blockSize).then(function (json) {
              var newGrid = SudokuUtils.processGridResponse(json);
              setGridValues(function (param) {
                    return newGrid;
                  });
              ToastService.success("Grid generated successfully");
              return Promise.resolve();
            }), (function (error) {
            console.error("Error generating grid:", error);
            ToastService.error("Error generating grid: " + String(error));
            return Promise.resolve();
          }));
  };
  var handleSolveSudoku = function () {
    if (hasNoNumber) {
      return ToastService.error("Cannot solve sudoku: There are no numbers in the grid");
    }
    var gridForSolving = Belt_Array.map(gridValues, (function (row) {
            return Belt_Array.map(row, (function (cell) {
                          if (cell.isInitial) {
                            return cell;
                          } else {
                            return {
                                    value: "",
                                    isInitial: cell.isInitial,
                                    isValid: cell.isValid
                                  };
                          }
                        }));
          }));
    Core__Promise.$$catch(SudokuUtils.sudokuSolve(gridForSolving).then(function (json) {
              var solvedGrid = SudokuUtils.processGridResponse(json);
              setGridValues(function (param) {
                    return solvedGrid;
                  });
              return Promise.resolve();
            }), (function (error) {
            console.error("Error solving grid:", error);
            ToastService.error("Error solving grid");
            return Promise.resolve();
          }));
  };
  var handleSetAsInitial = function () {
    if (hasNoNumber) {
      return ToastService.error("Cannot set as initial: There are no numbers in the grid");
    } else if (hasAnyValidationError(gridValues)) {
      return ToastService.error("Cannot set as initial: There are validation errors in the grid");
    } else {
      return setGridValues(function (prev) {
                  return Belt_Array.map(prev, (function (row) {
                                return Belt_Array.map(row, (function (cell) {
                                              if (cell.value !== "") {
                                                return {
                                                        value: cell.value,
                                                        isInitial: true,
                                                        isValid: cell.isValid
                                                      };
                                              } else {
                                                return cell;
                                              }
                                            }));
                              }));
                });
    }
  };
  var handleResetInitial = function () {
    if (hasNoNumber) {
      return ToastService.error("Cannot reset initial: There are no numbers in the grid");
    } else {
      setGridValues(function (prev) {
            return Belt_Array.map(prev, (function (row) {
                          return Belt_Array.map(row, (function (cell) {
                                        return {
                                                value: cell.value,
                                                isInitial: false,
                                                isValid: cell.isValid
                                              };
                                      }));
                        }));
          });
      return ToastService.success("Initial status reset successfully");
    }
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx(ReactToastify$1.ToastContainer, {
                      position: ReactToastify.positionToString("topRight"),
                      autoClose: 5000,
                      hideProgressBar: false,
                      newestOnTop: true,
                      closeOnClick: true,
                      rtl: false,
                      pauseOnFocusLoss: true,
                      draggable: true,
                      pauseOnHover: true,
                      theme: "light"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("h2", {
                                              children: "Sudoku Grid"
                                            }),
                                        JsxRuntime.jsx("div", {
                                              children: JsxRuntime.jsxs("select", {
                                                    children: [
                                                      JsxRuntime.jsx("option", {
                                                            children: "4x4 (2x2 blocks)",
                                                            value: "2"
                                                          }),
                                                      JsxRuntime.jsx("option", {
                                                            children: "9x9 (3x3 blocks)",
                                                            value: "3"
                                                          })
                                                    ],
                                                    className: "border border-gray-300 rounded px-2 py-1",
                                                    value: blockSize.toString(),
                                                    onChange: (function ($$event) {
                                                        var newBlockSize = Core__Option.getOr(Core__Int.fromString($$event.target.value, undefined), 3);
                                                        setBlockSize(function (param) {
                                                              return newBlockSize;
                                                            });
                                                        setGridSize(function (param) {
                                                              return Math.imul(newBlockSize, newBlockSize);
                                                            });
                                                        setGridValues(function (param) {
                                                              return SudokuUtils.createEmptyGrid(Math.imul(newBlockSize, newBlockSize));
                                                            });
                                                      })
                                                  }),
                                              className: "flex items-center gap-2 ml-2"
                                            })
                                      ],
                                      className: "text-xl font-semibold mb-4 justify-start flex items-center"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx(Grid.make, {
                                            size: gridSize,
                                            values: gridValues,
                                            onCellChange: handleCellChange
                                          }),
                                      className: "border-2 border-gray-300 p-4 justify-center flex "
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: "Controls",
                                      className: "text-xl font-semibold mb-4"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx(Button.make, {
                                              children: "Generate New Sudoku",
                                              onClick: (function (param) {
                                                  handleGenerateGrid();
                                                })
                                            }),
                                        JsxRuntime.jsx(Button.make, {
                                              children: "Solve Sudoku",
                                              onClick: (function (param) {
                                                  handleSolveSudoku();
                                                })
                                            }),
                                        JsxRuntime.jsx(Button.make, {
                                              children: "Clear Grid",
                                              onClick: (function (param) {
                                                  handleClearGrid();
                                                })
                                            }),
                                        JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsx("h3", {
                                                      children: "Custom Sudoku",
                                                      className: "text-lg font-bold mb-2 "
                                                    }),
                                                JsxRuntime.jsxs("div", {
                                                      children: [
                                                        JsxRuntime.jsx(Button.make, {
                                                              children: "Set Current Numbers as Initial",
                                                              className: "bg-indigo-600 hover:bg-indigo-700",
                                                              onClick: (function (param) {
                                                                  handleSetAsInitial();
                                                                })
                                                            }),
                                                        JsxRuntime.jsx(Button.make, {
                                                              children: "Reset Initial Status",
                                                              className: "bg-gray-600 hover:bg-gray-700",
                                                              onClick: (function (param) {
                                                                  handleResetInitial();
                                                                })
                                                            })
                                                      ],
                                                      className: "flex gap-2"
                                                    }),
                                                JsxRuntime.jsx("p", {
                                                      children: "Input your puzzle and click 'Set as Initial' before solving",
                                                      className: "text-sm text-gray-600 mt-2"
                                                    })
                                              ],
                                              className: "border-t pt-4 mt-4"
                                            })
                                      ],
                                      className: "space-y-4 flex justify-start flex-col"
                                    })
                              ]
                            })
                      ],
                      className: "grid grid-cols-2 gap-6"
                    })
              ]
            });
}

var make = SudokuIndex;

export {
  make ,
}
/*  Not a pure module */
